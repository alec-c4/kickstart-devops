version: '3.9'

services:

### Services 

  postgres:
    container_name: "${APP_NAME}-postgres"
    build:
      context: services/postgres
      dockerfile: Dockerfile 
    expose:
      - 5432   
    networks:
      - internal      
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    container_name: "${APP_NAME}-traefik"
    build:
      context: services/traefik
      dockerfile: Dockerfile 
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"      
    labels:
      - "traefik.http.middlewares.traefik-compress.compress=true"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_PASSWORD}"
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"      
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-compress,auth"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"            
    scale: 1     
    networks:
      - internal
      - external

### Apps

  app-main:
    build:
      context: apps/main
      dockerfile: Dockerfile
    scale: 1     
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-main.rule=Host(`${APP_MAIN_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-main.entrypoints=websecure"  
      - "traefik.http.routers.${APP_NAME}-main.tls=true"
      - "traefik.http.routers.${APP_NAME}-main.tls.certresolver=myresolver"  
      - "traefik.http.routers.${APP_NAME}-main.middlewares=traefik-compress"      

  app-admin:
    container_name: "${APP_NAME}-admin"
    scale: 1     
    networks:
      - internal
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-admin.rule=Host(`${APP_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-admin.entrypoints=websecure"    
      - "traefik.http.routers.${APP_NAME}-admin.tls=true"
      - "traefik.http.routers.${APP_NAME}-admin.tls.certresolver=myresolver"
      - "traefik.http.routers.${APP_NAME}-admin.middlewares=traefik-compress"      


  app-api:
    container_name: "${APP_NAME}-api"
    scale: 1     
    networks:
      - internal
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-api.rule=Host(`${APP_API_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-api.entrypoints=websecure"    
      - "traefik.http.routers.${APP_NAME}-api.tls=true"
      - "traefik.http.routers.${APP_NAME}-api.tls.certresolver=myresolver"
      - "traefik.http.routers.${APP_NAME}-api.middlewares=traefik-compress"      


### Infrastructure

networks:
  external:
  internal:
    driver: bridge

volumes:
  postgres:
  letsencrypt: