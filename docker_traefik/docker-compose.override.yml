version: "3.9"

services:
  ### Services

  postgres:
    container_name: "${APP_NAME}-postgres"
    build:
      context: services/postgres
      dockerfile: Dockerfile
    expose:
      - 5432
    networks:
      - internal
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: "${APP_NAME}-pgadmin"
    image: dpage/pgadmin4
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - internal
      - external

  traefik:
    container_name: "${APP_NAME}-traefik"
    build:
      context: services/traefik
      dockerfile: Dockerfile
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "8080:8080"
    scale: 1
    networks:
      - internal
      - external

  ### Apps

  app-main:
    container_name: "${APP_NAME}-main"
    build:
      context: apps/main
      dockerfile: Dockerfile
    scale: 1
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-main.rule=Host(`${APP_MAIN_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-main.entrypoints=web"

  app-admin:
    image: "nginxdemos/hello"
    container_name: "${APP_NAME}-admin"
    scale: 1
    networks:
      - internal
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-admin.rule=Host(`${APP_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-admin.entrypoints=web"

  app-api:
    container_name: "${APP_NAME}-api"
    scale: 1
    networks:
      - internal
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-api.rule=Host(`${APP_API_DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME}-api.entrypoints=web"

### Infrastructure

networks:
  external:
  internal:
    driver: bridge

volumes:
  postgres:
  pgadmin:
